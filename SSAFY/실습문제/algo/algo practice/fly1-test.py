"""
문제 분석 단계
1. 여유를 가지고 차근차근 문제를 분석하기
   - 문제의 조건을 유심히 볼 것
2. 예시, 첫번째 테스트케이스를 손으로 그려보면서 문제를 이해할 것
3. 손으로 풀어보기
4. 내가 직접 테케를 하나 만들어보기

코드를 작성하기 전에 계획
1. 문제 유형 파악해보기
  - 이전에 비슷하게 풀었던 문제, 파리퇴치(큰사각형 안에서 작은사각형 반복하기) 파리퇴치3(델타배열)

코드 작성
- 차근차근할 것
- 한번에 여러 단계 작성 후에 실행 x
- 한줄씩 작성하고 print 찍어서 확인하기

1. 입력받기
2. 문제를 쪼개서, 일부분만 해볼것
ex) 스도쿠검증: 1개 행만 가지고 해보기
ex) 파리퇴치: MxM 작은 정사각형을 모두 만들지 말고, 기준점을 (3, 2) 인 경우만 해보기
  R, C = 3, 2
반복문을 돌지말고, 하나의 경우만 고정해서 해보기

  for R in range(N-M+1): xx
    forxx

3. 여기서 조금더 발전시키려면 어떻게 하면 될까?
ex) 파리퇴치: 고정 => 반복문, (규칙성 찾기) + 합의 최대값구하기
ex) 스도쿠: 1행 => 9개행 => 1열 => 9개열 => ... 






"""




N = 5
M = 3



def draw_small_square(arr, R, C):
    cnt = 1
    for r in range(M):
        for c in range(M):
            arr[R+r][C+c] = cnt
            cnt += 1


    
    for r in range(5):
        print(arr[r])



for R in range(N-M+1):
    for C in range(N-M+1):
        # (R, C)
        print('-'*8)
        print(f"{R}, {C}")
        arr = [[0]*N for _ in range(N)] # 빈 2차원 리스트
        draw_small_square(arr, R, C)
