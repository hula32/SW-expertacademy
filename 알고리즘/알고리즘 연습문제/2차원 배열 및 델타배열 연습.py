arr = [
    [1, 2, 3, 4],
    [5, 6, 7, 8], 
    [9, 10, 11, 12]
]


# for num in arr:

for r in range(3): # 행 인덱스 순회 r: 0, 1, 2
    for c in range(4): # 열 인덱스 순회 c: 0, 1, 2, 3
        # (r, c): (0, 0), (0, 1), (0,2), (0, 3), (1, 0), (1, 1), ... ,(2, 3)
        print(f"({r}, {c}) {arr[r][c]}", end=' ')
    print()


# 델타배열
# 특정한 좌표 (r, c)를 중심으로 상하좌우, 대각선 탐색을 하고 싶은 경우.
# ex) 위 arr에서 만약에 해당 칸의 숫자가 6이라면, 상하좌우에 있는 칸에다가 +10을 하겠다.

# 상하좌우용 델타배열(4방탐색)
dr = [-1, 1, 0, 0]
dc = [0, 0, -1, 1]

# 대각선 델타배열(4방탐색)
dr = [-1, -1, 1, 1]
dc = [-1, 1, -1, 1]

# 8방탐색 상하좌우+대각선
dr = [-1, 1, 0, 0] + [-1, -1, 1, 1]
dc = [0, 0, -1, 1] + [-1, 1, -1, 1]

for r in range(3):
    for c in range(4):
        if arr[r][c] == 6:
            # 상하좌우탐색
            # 현재 좌표 (r, c) : 숫자 6의 좌표
            for d in range(8): # 4방탐색일 때는 4, 8방탐색일 때는 8
                # 새로운 좌표: 현재 기준 좌표 + 델타
                nr, nc = r + dr[d], c + dc[d]
                # 새로운 좌표를 만들었을 때는 항상 경계조건 체크할 것
                if 0 <= nr < 3 and 0 <= nc < 4:
                    arr[nr][nc] += 10

print("---")

for r in range(3): # 행 인덱스 순회 r: 0, 1, 2
    for c in range(4): # 열 인덱스 순회 c: 0, 1, 2, 3
        # (r, c): (0, 0), (0, 1), (0,2), (0, 3), (1, 0), (1, 1), ... ,(2, 3)
        print(f"({r}, {c}) {arr[r][c]}", end=' ')
    print()

